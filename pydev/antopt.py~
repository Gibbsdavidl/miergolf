
import numpy as np

# Ant Optimization #


def optimize (s, nodes, sparseMat):

    for run in xrange(s["runs"]):

        # reset nodes pheromone #
        nodes = resetNodes(nodes)

        iters = 0; maxIters = 100000;
        
        while iters < maxIters and s["c"] > s["ct"]:

            # generate the probability distribution # 
            probs = genProbs(s,nodes)

            # for each new ant, generate a solution
                # sample a node index
                # then recompute the cumulative

            # score each solution, choose the best #
                # perform local optimization #
            
            # update the best/resetbest/iterbests #

            # update the pheromones #

            # check for convergence #

def resetNodes(nodes):
    for k in nodes.keys():
        (a,b,c,d,e) = nodes[k]
        nodes[k] = (a,b,c,0.5,e)
    return(nodes)

    
def genProbs(s,nodes):
    ps = np.zeros(len(nodes))
    for k in nodes.keys():
        ps[k] = (pow(nodes[k][2], s["alph"]) * pow(nodes[k][3], s["beta"]))
    return(ps/(sum(ps)))
